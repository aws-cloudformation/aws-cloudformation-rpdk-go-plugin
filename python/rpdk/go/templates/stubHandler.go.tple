package resource

import (
	"context"

	"github.com/aws-cloudformation/aws-cloudformation-rpdk-go-plugin/cfn/cfnerr"
	"github.com/aws-cloudformation/aws-cloudformation-rpdk-go-plugin/cfn/errcode"
	"github.com/aws-cloudformation/aws-cloudformation-rpdk-go-plugin/cfn/handler"
	"github.com/aws-cloudformation/aws-cloudformation-rpdk-go-plugin/cfn/operationstatus"
)

// ResourceHandler implements the cfn.Handler interface.
// The zero value is ready to use.
type ResourceHandler struct {
}

// Create handles the Create event from the Cloudformation service.
func (r *ResourceHandler) Create(ctx context.Context, request handler.Request) (handler.ProgressEvent, error) {
	//***Add code here: Make your API call, modify the model, etc..
	m := &Model{}
	if err := request.ResourceProperties(m); err != nil {
		cfnErr := cfnerr.New(errcode.GeneralServiceException.String(), "Unable to complete request", err)
		return handler.NewFailedEvent(cfnErr), nil
	}

	p := handler.NewEvent()
	p.OperationStatus = operationstatus.Success
	p.Message = "Completed"

	// return the status
	return p, nil
}

// Delete handles the Delete event from the Cloudformation service.
func (r *ResourceHandler) Delete(ctx context.Context, request handler.Request) (handler.ProgressEvent, error) {
	//***Add code here: Make your API call, modify the model, etc..
	m := &Model{}
	if err := request.ResourceProperties(m); err != nil {
		cfnErr := cfnerr.New(errcode.GeneralServiceException.String(), "Unable to complete request", err)
		return handler.NewFailedEvent(cfnErr), nil
	}

	p := handler.NewEvent()
	p.OperationStatus = operationstatus.Success
	p.Message = "Completed"

	// return the status
	return p, nil
}

// List handles the List event from the Cloudformation service.
func (r *ResourceHandler) List(ctx context.Context, request handler.Request) (handler.ProgressEvent, error) {
	//***Add code here: Make your API call, modify the model, etc..
	m := &Model{}
	if err := request.ResourceProperties(m); err != nil {
		cfnErr := cfnerr.New(errcode.GeneralServiceException.String(), "Unable to complete request", err)
		return handler.NewFailedEvent(cfnErr), nil
	}

	p := handler.NewEvent()
	p.OperationStatus = operationstatus.Success
	p.Message = "Completed"

	// return the status
	return p, nil
}

// Read handles the Read event from the Cloudformation service.
func (r *ResourceHandler) Read(ctx context.Context, request handler.Request) (handler.ProgressEvent, error) {
	//***Add code here: Make your API call, modify the model, etc..
	m := &Model{}
	if err := request.ResourceProperties(m); err != nil {
		cfnErr := cfnerr.New(errcode.GeneralServiceException.String(), "Unable to complete request", err)
		return handler.NewFailedEvent(cfnErr), nil
	}

	p := handler.NewEvent()
	p.OperationStatus = operationstatus.Success
	p.Message = "Completed"

	// return the status
	return p, nil
}

// Update handles the Update event from the Cloudformation service.
func (r *ResourceHandler) Update(ctx context.Context, request handler.Request) (handler.ProgressEvent, error) {
	//***Add code here: Make your API call, modify the model, etc..
	m := &Model{}
	if err := request.ResourceProperties(m); err != nil {
		cfnErr := cfnerr.New(errcode.GeneralServiceException.String(), "Unable to complete request", err)
		return handler.NewFailedEvent(cfnErr), nil
	}

	p := handler.NewEvent()
	p.OperationStatus = operationstatus.Success
	p.Message = "Completed"

	// return the status
	return p, nil
}
