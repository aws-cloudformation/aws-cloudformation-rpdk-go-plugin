package main

import (
	"context"
	"errors"
	"fmt"

	"github.com/aws/aws-sdk-go/aws/session"

	"github.com/aws-cloudformation/aws-cloudformation-rpdk-go-plugin/cfn"
	"github.com/aws-cloudformation/aws-cloudformation-rpdk-go-plugin/cfn/handler"
	"{{ path }}"
)

/*
This file is autogenerated, do not edit;
changes will be undone by the next 'cfn generate' command.
*/

type Handler struct{}

func (r *Handler) Create(ctx context.Context, req handler.Request) handler.ProgressEvent {
	return wrap(ctx, req, resource.Create)
}

func (r *Handler) Read(ctx context.Context, req handler.Request) handler.ProgressEvent {
	return wrap(ctx, req, resource.Read)
}

func (r *Handler) Update(ctx context.Context, req handler.Request) handler.ProgressEvent {
	return wrap(ctx, req, resource.Update)
}

func (r *Handler) Delete(ctx context.Context, req handler.Request) handler.ProgressEvent {
	return wrap(ctx, req, resource.Delete)
}

// List handles the List event from the Cloudformation service.
func (r *Handler) List(ctx context.Context, req handler.Request) handler.ProgressEvent {
	return wrap(ctx, req, resource.List)
}

// main is the entry point of the applicaton.
func main() {
	cfn.Start(&Handler{})
}

type handlerFunc func(*resource.Model, *resource.Model, *session.Session) (handler.ProgressEvent, error)

func wrap(ctx context.Context, req handler.Request, f handlerFunc) (response handler.ProgressEvent) {
	defer func() {
		// Catch any panics and return a failed ProgressEvent
		if r := recover(); r != nil {
			err, ok := r.(error)
			if !ok {
				err = errors.New(fmt.Sprint(r))
			}

			response = handler.NewFailedEvent(err)
		}
	}()

	// Populate the previous model
	prevModel := &resource.Model{}
	if err := req.UnmarshalPrevious(prevModel); err != nil {
		return handler.NewFailedEvent(err)
	}

	// Populate the current model
	currentModel := &resource.Model{}
	if err := req.Unmarshal(currentModel); err != nil {
		return handler.NewFailedEvent(err)
	}

	// Retrieve the session
	session, err := cfn.GetContextSession(ctx)
	if err != nil {
		return handler.NewFailedEvent(err)
	}

	response, err = f(prevModel, currentModel, session)
	if err != nil {
		return handler.NewFailedEvent(err)
	}

	return response
}
